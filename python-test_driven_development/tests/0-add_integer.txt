The ``0-add_integer`` module
======================

Using ``add_integer``
-------------------

This is an example text file in reStructuredText format.  First import
``add_integer`` from the ``0-add_integer`` module:

    >>> add_integer = __import__('0-add_integer').add_integer

Now use it:

    >>> add_integer(5, 10)
    15

    >>> add_integer(100, 100)
    200

    >>> add_integer(5.3, 3)
    8

    >>> add_integer()
    Traceback (most recent call last):
    ´´´
    TypeError: add_integer() missing 1 required positional argument: 'a'

    >>> add_integer(4546456454564646564451, 11214515161561161515615115)
    11219061618015726162179566

    >>> add_integer(-45, -2)
    -47

    >>> add_integer(--5, --5)
    10

    >>> add_integer("Schol", "School")
    Traceback (most recent call last):
    ´´´
    TypeError: a must be an integer

    >>> add_integer("str")
    Traceback (most recent call last):
    ´´´
    TypeError: a must be an integer

    >>> add_integer(5, "str")
    Traceback (most recent call last):
    ´´´
    TypeError: b must be an integer

    >>> add_integer(float(NaN), 5)
    Traceback (most recent call last):
    ´´´
    NameError: name 'NaN' is not defined

    >>> add_integer(5, float(NaN))
    Traceback (most recent call last):
    ´´´
    NameError: name 'NaN' is not defined

    >>> add_integer(float(NaN))
    Traceback (most recent call last):
    ´´´
    NameError: name 'NaN' is not defined

    >>> add_integer(5, {3, 3})
    Traceback (most recent call last):
    ´´´
    TypeError: b must be an integer

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    ´´´
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(50, False)
    50
